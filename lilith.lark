start               : block+

block               : return
                    | calls
                    | assign
                    | "pass" ";"

return              : "return" value ";"

calls               : call ("." call)* ";"

call                : identifier "!" -> callnoparams
                    | identifier "(" parameters ")" -> callwithparams

assign              : "void" "main" "->" block+ "end" -> mainfunction
                    | type identifier "->" block+ "end" -> functionnoarguments
                    | type identifier "->" "(" arguments ")" block+ "end" -> functionwitharguments
                    | identifier "+" "+" ";" -> variableincrement
                    | identifier "-" "-" ";" -> variabledecrement
                    | identifier assignoperator value ";" -> reasignvariable
                    | type identifier "=" value ";" -> variable
                    | "const" type identifier "=" value ";" -> constvariable
                    | "shared" type identifier "=" value ";" -> sharedvariable
                    | "shared" "const" type identifier "=" value ";" -> sharedconstvariable

assignoperator      : "=" -> equals
                    | "+=" -> plusequals
                    | "-=" -> lessequals
                    | "*=" -> multiequals
                    | "/=" -> divideequals
                    | "%=" -> modulusequals

parameters          : value ("," value)*

arguments           : argument ("," argument)*

argument            : "void"
                    | type identifier
                    | type identifier "->" value -> argumentdefault


identifier          : /[\&\_][a-zA-Z0-9]*/
                    | CNAME

type                : /[a-zA-Z0-9]+[\*]?/ -> type

value               : string
                    | number
                    | bool
                    | arithmetic
                    | identifier

arithmetic          : value (arithmeticsign value)+

arithmeticsign      : "+" -> plus
                    | "-" -> minus
                    | "/" -> divide
                    | "*" -> multiply
                    | "%" -> modulus

string              : /\'.*\'/ 
                    | /\".*\"/

number              : SIGNED_NUMBER
                    | SIGNED_FLOAT

bool                : /true/
                    | /false/

COMMENT             : "--" /[^\n]/*

%import common.SIGNED_NUMBER
%import common.SIGNED_FLOAT
%import common.ESCAPED_STRING
%import common.CNAME
%import common.WS

%ignore COMMENT
%ignore WS