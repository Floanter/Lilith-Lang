start               : block+

block               : return
                    | conditional
                    | calls
                    | assign
                    | "pass" ";"

return              : "return" value ";"

conditional         : "if" condition (logicaloperator condition)* "then" block+ "end"                    -> ifcondition
                    | "if" condition (logicaloperator condition)* "then" block+ "else" block+ "end"      -> ifelsecondition
                    | "unless" condition (logicaloperator condition)* "then" block+ "end"                -> unlesscondition
                    | "unless" condition (logicaloperator condition)* "then" block+ "else" block+ "end"  -> unlesselsecondition

calls               : call ("." call)* ";"

call                : identifier "!" -> callnoparams
                    | identifier "(" parameters ")" -> callwithparams

assign              : "void" "main" "->" block+ "end" -> mainfunction
                    | type identifier "->" block+ "end" -> functionnoarguments
                    | type identifier "->" "(" arguments ")" block+ "end" -> functionwitharguments
                    | identifier arrayposition+ "+" "+" ";" -> arrayvariableincrement
                    | identifier arrayposition+ "-" "-" ";" -> arrayvariabledecrement
                    | identifier "+" "+" ";" -> variableincrement
                    | identifier "-" "-" ";" -> variabledecrement
                    | identifier arrayposition+ assignoperator value ";" -> arrayvariablereasign
                    | identifier assignoperator value ";" -> variablereasign
                    | "array" "<" type ">" identifier "=" "[" value ("," value)* "]" ";" -> arrayvariableassign
                    | "array" "<" type ">" identifier arrayposition+ ";" -> variabledeclaration
                    | type identifier ";" -> variabledeclaration
                    | type identifier "=" value ";" -> variableassing
                    | "const" type identifier "=" value ";" -> constvariable
                    | "shared" type identifier "=" value ";" -> sharedvariable
                    | "shared" "const" type identifier "=" value ";" -> sharedconstvariable

arrayposition       :  "[" number "]"

condition           : value comparisonoperator value
                    | value

assignoperator      : /\=/
                    | /\+\=/
                    | /\-\=/
                    | /\*\=/
                    | /\/\=/
                    | /\%\=/

comparisonoperator  : /is/      
                    | /not/      
                    | /greater/  
                    | /less/     
                    | /\>\=/    
                    | /\<\=/     

logicaloperator     : /and/
                    | /or/

parameters          : value ("," value)*

arguments           : argument ("," argument)*

argument            : "void"
                    | type identifier
                    | type identifier "=" value -> argumentdefault
                    | "array" "<" type ">" identifier -> arrayargument


identifier          : /[\&\_][a-zA-Z0-9]*/
                    | CNAME

type                : /[a-zA-Z0-9]+[\*]?/ -> type

value               : string
                    | number
                    | bool
                    | arithmetic
                    | calls
                    | identifier

arithmetic          : value (arithmeticsign value)+

arithmeticsign      : /\+/
                    | /\-/ 
                    | /\//
                    | /\*/ 
                    | /\%/ 

string              : /\'.*\'/ 
                    | /\".*\"/

number              : SIGNED_NUMBER
                    | SIGNED_FLOAT

bool                : /true/
                    | /false/

COMMENT             : "--" /[^\n]/*

%import common.SIGNED_NUMBER
%import common.SIGNED_FLOAT
%import common.ESCAPED_STRING
%import common.CNAME
%import common.WS

%ignore COMMENT
%ignore WS