class Template:

    def requiredImports(self):
        return f'#include <stdio.h>\n'
    
    ################################################################
    ################################################################
    #                           IMPORT                             #
    ################################################################
    ################################################################

    ################################################################
    ################################################################
    #                        STRUCTURE                             #
    ################################################################
    ################################################################
    def structure(self, i):
        return f'typedef struct {i["identifier"]} \n{{\n {i["property"]}}} {i["identifier"]};\n'
    def propertyt(self, pr):
        p = ''
        if pr['parameters'] != '':
            p += f'{pr["type"]} ({pr["identifier"]})({pr["parameters"]})'
        else:
            p += f'{pr["type"]} {pr["identifier"]}'
        if pr['array_size'] != '':
            p += f'{pr["array_size"]}'
        p += ';\n'
        return p
    ################################################################
    ################################################################
    #                        STRUCTURE                             #
    ################################################################
    ################################################################

    ################################################################
    ################################################################
    #                            MACRO                             #
    ################################################################
    ################################################################
    def macro(self, m):
        macro = f'#define {m["identifier"]}'
        if m['macro_parameter'] != '':
            macro += f'({m["macro_parameter"]})'
        if m['value'] != '':
            macro += f' {m["value"]}'
        if m['block'] != '':
            macro += f'{m["block"]}'
        macro += '\n'
        return macro
    ################################################################
    ################################################################
    #                            MACRO                             #
    ################################################################
    ################################################################

    ################################################################
    ################################################################
    #                         FUNCTION                             #
    ################################################################
    ################################################################
    def cMain(self):
        return 'int main(int argc, char* argv[]) {\n    _MAINLILITHFUNC_(argc, argv);\n}' 

    def function(self, fn):
        if fn["block"] == '':
            return f'{fn["special_word"]}{fn["type"]} {fn["identifier"]}({fn["parameters"]});\n'
        return f'{fn["special_word"]}{fn["type"]} {fn["identifier"]}({fn["parameters"]})\n{{\n{fn["block"]}}}\n'

    def call(self, c):
        return f'{c["identifier"]}({c["call_params"]});\n'
    ################################################################
    ################################################################
    #                         FUNCTION                             #
    ################################################################
    ################################################################



    ################################################################
    ################################################################
    #                        CONDITIONAL                           #
    ################################################################
    ################################################################
    def ift(self, i):
        ift = f'if ({i["condition"]})\n{{\n{i["block"]}}}'
        if i['elif'] != '':
            ift += f'{i["elif"]}'
        if i['else'] != '':
            ift += f'{i["else"]}'
        ift += '\n'
        return ift
    def elift(self, eli):
        return f' else if ({eli["condition"]})\n{{\n{eli["block"]}}}'
    def elset(self, block):
        return f' else\n{{\n{block}}}'

    def switch(self, switch):
        return f'switch ({switch["expression"]})\n{{\n{switch["when"]}{switch["default"]}}}\n'

    def when(self, case):
        return f'case {case["condition"]}:\n{case["block"]}break;\n'

    def default(self, block):
        return f'default:\n{block}'
    ################################################################
    ################################################################
    #                        CONDITIONAL                           #
    ################################################################
    ################################################################

    ################################################################
    ################################################################
    #                            LOOPS                             #
    ################################################################
    ################################################################
    def whilet(self, w):
        return f'while ({w["condition"]})\n{{\n{w["block"]}}}\n'
    def doWhile(self, w):
        return f'do\n{{\n{w["block"]}}}\nwhile ({w["condition"]});\n'
    def fort(self, f):
        return f'for ({f["variable"][0][:-1]} {f["condition"]}; {f["variable"][1][:-2]})\n{{\n{f["block"]}}}\n'
    ################################################################
    ################################################################
    #                            LOOPS                             #
    ################################################################
    ################################################################


    ################################################################
    ################################################################
    #                         VARIABLE                             #
    ################################################################
    ################################################################

    def variable(self, var):
        value = var["value"].replace('\n', '').replace(';', '')
        return f'{var["special_word"]}{var["type"]} {var["identifier"]}{var["array_size"]}{var["assignment"]}{value};\n'

    ################################################################
    ################################################################
    #                         VARIABLE                             #
    ################################################################
    ################################################################


    ################################################################
    ################################################################
    #                           VALUES                             #
    ################################################################
    ################################################################
    def typedef(self, t):
        return f'typedef {t["type"]} {t["identifier"]};\n'

    def array_values(self, values: list):
        arrayValues = '{'
        arrayValues += f'{values[0]}'
        if len(values ) > 1:
            for i in range(1, len(values)):
                arrayValues += f', {values[i]}'
        arrayValues += '}'
        return arrayValues
    
    def parameters(self, parameters: list):
        params = f'{parameters[0]}'
        if len(parameters) > 1:
            for i in range(1, len(parameters)):
                params += f', {parameters[i]}'
        return params
    ################################################################
    ################################################################
    #                           VALUES                             #
    ################################################################
    ################################################################