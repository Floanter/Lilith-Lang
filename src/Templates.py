from ast import arguments


class Templates:
    def __init__(self):
        pass
class Template:
    ################################################################
    ################################################################
    #                           functio                             #
    ################################################################
    ################################################################
    def builtin_c(self, name):
        return f'#include <{name}>\n'
    ################################################################
    ################################################################
    #                           IMPORT                             #
    ################################################################
    ################################################################

    ################################################################
    ################################################################
    #                         FUNCTION                             #
    ################################################################
    ################################################################
    def argument(self, types, identifiers):
        arguments = f'{types[0]} {identifiers[0]}'
        if len(identifiers) > 1:
            for i in range(1, len(identifiers)):
                arguments += f'{types[i]} {identifiers[i]}'
        return arguments
    ################################################################
    ################################################################
    #                         FUNCTION                             #
    ################################################################
    ################################################################